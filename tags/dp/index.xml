<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DP on Engineering Notes</title>
    <link>/tags/dp/</link>
    <description>Recent content in DP on Engineering Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Feb 2021 23:52:20 +0200</lastBuildDate>
    
	<atom:link href="/tags/dp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode 300 Longest Increasing Subsequence (Complete Search with DP) - Cpp</title>
      <link>/posts/problem-solving/leetcode-300-longest-increasing-subsequence/</link>
      <pubDate>Wed, 17 Feb 2021 23:52:20 +0200</pubDate>
      
      <guid>/posts/problem-solving/leetcode-300-longest-increasing-subsequence/</guid>
      <description>Today I&amp;rsquo;m going to resolve, explain and share my c++ solution for
 Longest Increasing Subsequence on Leetcode   It&amp;rsquo;s the most popular problem in the interviews for complete search so I resolved using recursive backtracking.
For video explaining 
Or jump to directly to the code  class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; memo; public: int lengthOfLIS(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int length = nums.size(); memo.clear(); memo.resize(length+4, vector&amp;lt;int&amp;gt;(length+4, -1)); nums.push_back((int)-10e5); //-10000  int res = dfs(0, length, nums); nums.</description>
    </item>
    
  </channel>
</rss>